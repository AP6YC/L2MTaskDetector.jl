var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = L2MTaskDetector","category":"page"},{"location":"#L2MTaskDetector","page":"Home","title":"L2MTaskDetector","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for L2MTaskDetector.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [L2MTaskDetector]","category":"page"},{"location":"#L2MTaskDetector.TaskDetectorMetrics","page":"Home","title":"L2MTaskDetector.TaskDetectorMetrics","text":"TaskDetectorMetrics\n\nStateful information of the C3's metrics.\n\nFields\n\ncvis::Vector{AbstractCVI}: list of CVIs used in computing metrics for C3.\nvalues::Vector{Vector{Float64}}: most recent CVI criterion values.\nperformance::Float64: Meta-ICVI value.\nn_window::Int64: number of values to track for Meta-ICVI calculation.\n\n\n\n\n\n","category":"type"},{"location":"#L2MTaskDetector.TaskDetectorMetrics-Tuple{}","page":"Home","title":"L2MTaskDetector.TaskDetectorMetrics","text":"TaskDetectorMetrics()\n\nDefault constructor for the C3 metrics object.\n\n\n\n\n\n","category":"method"},{"location":"#L2MTaskDetector.TaskDetectorModule","page":"Home","title":"L2MTaskDetector.TaskDetectorModule","text":"TaskDetectorModule\n\nThe stateful information of C3.\n\nFields\n\nddvfa::DDVFA: the first processing step of C3.\nmetrics::TaskDetectorMetrics: metrics container for C3, containing ICVIs and more.\ntask_map::Dict{String, Int}: internal mapping of string task names to incremental indices.\ntask::L2MTask: the most recent task belief of C3.\nparams::TaskDetectorParameters: all algorithmic parameters.\n\n\n\n\n\n","category":"type"},{"location":"#L2MTaskDetector.TaskDetectorModule-Tuple{ConfParser.ConfParse}","page":"Home","title":"L2MTaskDetector.TaskDetectorModule","text":"TaskDetectorModule(conf::ConfParse)\n\nDefault constructor for the C3 stateful information, requires an L2M config.\n\nArguments\n\nconf::ConfParse: the L2M config object for the task detector.\n\n\n\n\n\n","category":"method"},{"location":"#L2MTaskDetector.TaskDetectorParameters","page":"Home","title":"L2MTaskDetector.TaskDetectorParameters","text":"TaskDetectorParameters\n\nStruct containing the options for the task detector.\n\nFields\n\nmean::Array{Float64, 1}: means of each feature, used by transformer.\nscale::Array{Float64, 1}: scaling parameter of each feature, used by transformer.\ntransformer::ZScoreTransform: object for transforming the data during preprocessing.\nwindows::Int: number of cells in each dimension (i.e., windows=2 results in 4 panels).\nfeat_dim::Int: dimension of each individual feature, before windowing.\nopts_ddvfa::opts_DDVFA: the DDVFA options object.\n\n\n\n\n\n","category":"type"},{"location":"#L2MTaskDetector.TaskDetectorParameters-Tuple{ConfParser.ConfParse}","page":"Home","title":"L2MTaskDetector.TaskDetectorParameters","text":"TaskDetectorParameters(config::ConfParse)\n\nDefault intialization for the task detector parameters.\n\nArguments\n\nconfig::ConfParse: global configuration object with fields for preprocessing.\n\n\n\n\n\n","category":"method"},{"location":"#L2MTaskDetector.classify-Union{Tuple{T}, Tuple{TaskDetectorModule, Vector{T}}} where T<:Real","page":"Home","title":"L2MTaskDetector.classify","text":"classify(taskmod::TaskDetectorModule, x::Array{T, 1}) where {T<:Real}\n\nGet the task from the features.\n\nArguments\n\ntaskmod::TaskDetectorModule: the task detector algorithmic module.\nx::Array{Real, 1}: the input sample (assumes preprocessed and 1-D).\n\n\n\n\n\n","category":"method"},{"location":"#L2MTaskDetector.sigmoid-Tuple{Array}","page":"Home","title":"L2MTaskDetector.sigmoid","text":"sigmoid(x::Array)\n\nBroadcasts sigmoid(x::Real) across an array x.\n\nArguments\n\nx::Array: array to process sigmoidally.\n\n\n\n\n\n","category":"method"},{"location":"#L2MTaskDetector.sigmoid-Tuple{Real}","page":"Home","title":"L2MTaskDetector.sigmoid","text":"sigmoid(x::Real)\n\nReturn the sigmoid function on x.\n\nArguments\n\nx::Real: the value to process through the sigmoid function.\n\n\n\n\n\n","category":"method"},{"location":"#L2MTaskDetector.task_feature_preprocess-Tuple{Array, L2MTaskDetector.TaskDetectorParameters}","page":"Home","title":"L2MTaskDetector.task_feature_preprocess","text":"task_feature_preprocess(x::Array)\n\nPreprocess the incoming features for task detection module 3.\n\nArguments\n\nx::Array: array to preprocess for C3.\nparams::TaskDetectorParameters: the algorithm's internal parameters.\n\n\n\n\n\n","category":"method"},{"location":"#L2MTaskDetector.train!-Union{Tuple{T}, Tuple{TaskDetectorModule, Vector{T}}} where T<:Real","page":"Home","title":"L2MTaskDetector.train!","text":"train!(taskmod::TaskDetectorModule, x::Array{T, 1} ; y=0)  where {T<:Real}\n\nTrain the C3 art module in place on an array.\n\nArguments\n\ntaskmod::TaskDetectorModule: the task detector algorithmic module.\nx::Array{Real, 1}: the input sample (assumes preprocessed and 1-D).\ny=0: incremental integer supervisory label, default to empty for unsupervised.\n\n\n\n\n\n","category":"method"},{"location":"#L2MTaskDetector.update_metrics-Tuple{L2MTaskDetector.TaskDetectorMetrics, Array, Integer}","page":"Home","title":"L2MTaskDetector.update_metrics","text":"update_metrics(metrics::TaskDetectorMetrics, sample::Array, label::Int)\n\nUpdate the task detector's metrics using ICVIs.\n\nFields\n\nmetrics::TaskDetectorMetrics: the metrics object being updated.\nsample::Array: the array of features that are clustered to the label.\nlabel::Int: the label prescribed by the clustering algorithm.\n\n\n\n\n\n","category":"method"},{"location":"#L2MTaskDetector.window_average-Tuple{Array, Int64}","page":"Home","title":"L2MTaskDetector.window_average","text":"window_average(data::Array, bins::Int)\n\nAverage the 3-D data into bins.\n\nFor example, if bins = 2, then the features are averaged into two bins per dimension (i.e. four quadrants in a 2-D image), resulting in a vector of length four times the feature length.\n\nArguments\n\ndata::Array: the input features from C1.\nbins::Int: the number of cells in each dimension (see above).\n\n\n\n\n\n","category":"method"}]
}
